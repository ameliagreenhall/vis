// Generated by CoffeeScript 1.3.1
(function() {
  var MaPlot, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  MaPlot = function() {
    var brush, brushEnd, brushStart, chart, color, height, margin, radius, width, xAxis, xDomain, xScale, xValue, yAxis, yDomain, yScale, yValue;
    width = 600;
    height = 600;
    margin = {
      top: 20,
      right: 20,
      bottom: 20,
      left: 40
    };
    xValue = function(d) {
      return parseFloat(d.a);
    };
    yValue = function(d) {
      return parseFloat(d.m);
    };
    radius = 3;
    color = function(d) {
      if (yValue(d) > 0) {
        return "#000";
      } else {
        return "#ccc";
      }
    };
    xScale = d3.scale.linear().range([0, width]);
    yScale = d3.scale.linear().range([0, height]);
    xDomain = function(data) {
      return d3.extent(data, xValue);
    };
    yDomain = function(data) {
      return d3.extent(data, yValue).reverse();
    };
    xAxis = d3.svg.axis().scale(xScale).orient("bottom");
    yAxis = d3.svg.axis().scale(yScale).orient("left");
    brush = d3.svg.brush().on("brushstart", brushStart).on("brush", brush).on("brushend", brushEnd);
    chart = function(selection) {
      return selection.each(function(data) {
        var g, gEnter, pointsG, svg;
        console.log(data);
        xScale.domain(xDomain(data));
        yScale.domain(yDomain(data));
        svg = d3.select(this).selectAll("svg").data([data]);
        gEnter = svg.enter().append("svg").append("g");
        svg.attr("width", width + margin.left + margin.right);
        svg.attr("height", height + margin.top + margin.bottom);
        g = svg.select("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        g.append("g").attr("class", "x axis").attr("transform", "translate(" + 0 + "," + height + ")").call(xAxis);
        g.append("g").attr("class", "y axis").attr("transform", "translate(" + 0 + "," + 0 + ")").call(yAxis);
        pointsG = g.append("g").attr("class", "points");
        return pointsG.selectAll("circle").data(data).enter().append("circle").attr("class", "point").attr("cx", function(d) {
          return xScale(xValue(d));
        }).attr("cy", function(d) {
          return yScale(yValue(d));
        }).attr("r", radius).attr("fill", color);
      });
    };
    chart.height = function(_) {
      if (!arguments.length) {
        return height;
      }
      height = _;
      return chart;
    };
    chart.width = function(_) {
      if (!arguments.length) {
        return width;
      }
      width = _;
      return chart;
    };
    chart.margin = function(_) {
      if (!arguments.length) {
        return margin;
      }
      margin = _;
      return chart;
    };
    chart.radius = function(_) {
      if (!arguments.length) {
        return radius;
      }
      radius = _;
      return chart;
    };
    chart.color = function(_) {
      if (!arguments.length) {
        return color;
      }
      color = _;
      return chart;
    };
    chart.x = function(_) {
      if (!arguments.length) {
        return xValue;
      }
      xValue = _;
      return chart;
    };
    chart.y = function(_) {
      if (!arguments.length) {
        return yValue;
      }
      yValue = _;
      return chart;
    };
    brushStart = function(p) {
      return console.log("b");
    };
    brush = function(p) {
      return console.log("b");
    };
    brushEnd = function(p) {
      return console.log("b");
    };
    return chart;
  };

  root.MaPlot = MaPlot;

}).call(this);
